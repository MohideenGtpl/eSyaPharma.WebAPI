using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using eSyaPharma.DL;
using eSyaPharma.DL.Entities;
using eSyaPharma.DO;
using eSyaPharma.DL.Repository;
using eSyaPharma.IF;
using Microsoft.EntityFrameworkCore;

namespace eSyaPharma.DL.Repository
{
    public class DrugBrandRepository : IDrugBrandRepository
    {
        public async Task<List<DO_DrugBrand>> GetDrugBrandListByNamePrefix(int ISDCode, int drugFormulaId, string drugBrandPrefix)
        {
            try
            {
                using (var db = new eSyaEnterprise())
                {
                    var result = await db.GtEpdrcd
                             .Join(db.GtEpdrmf,
                             t => new { t.ManufacturerId },
                             b => new { b.ManufacturerId },
                             (t, b) => new { t, b })
                         .GroupJoin(db.GtEcapcd,
                        tb => new { ApplicationCode = tb.t.Packing },
                        d => new { d.ApplicationCode },
                        (tb, d) => new { tb, d = d.FirstOrDefault() })
                         .Where(w => w.tb.t.Isdcode == ISDCode && (w.tb.t.DrugFormulaId == drugFormulaId || drugFormulaId == 0) && w.tb.t.DrugBrand.StartsWith(drugBrandPrefix != "All" ? drugBrandPrefix : ""))
                        .Select(a => new DO_DrugBrand
                        {
                            GenericID = a.tb.t.GenericId,
                            DrugFormulaID = a.tb.t.DrugFormulaId,
                            DrugCode = a.tb.t.DrugCode,
                            DrugBrand = a.tb.t.DrugBrand,
                            ManufacturerID = a.tb.t.ManufacturerId,
                            Manufacturer = a.tb.b.ManufacturerName,
                            DrugPrintDesc = a.tb.t.DrugPrintDesc,
                            PackSize = a.tb.t.PackSize,
                            PackingId = a.tb.t.Packing,
                            Packing = a.d.CodeDesc,
                            DrugVolume = a.tb.t.DrugVolume,
                            ReferenceMRP = a.tb.t.ReferenceMrp,
                            BarcodeID = a.tb.t.BarcodeId,
                            ActiveStatus = a.tb.t.ActiveStatus
                        }).ToListAsync();
                    return result;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_DrugBrand> GetDrugParameterList(int drugCode)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var ds = db.GtEpdrcd
                        .Where(w => w.DrugCode == drugCode)
                        .Select(r => new DO_DrugBrand
                        {
                            l_FormParameter = r.GtEpdrpa.Select(p => new DO_eSyaParameter
                            {
                                ParameterID = p.ParameterId,
                                ParmAction = p.ParamAction
                            }).ToList()
                        }).FirstOrDefaultAsync();

                    return await ds;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<bool> IsDrugVolumeRequired(int packingID)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var ds = db.GtEpdrvl
                        .Where(w => w.Packing == packingID && w.IsDrugVolume && w.ActiveStatus)
                        .CountAsync();

                    return await ds > 0;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateDrugBrand(DO_DrugBrand drugBrand)
        {
            try
            {
                if (drugBrand.DrugCode != 0)
                {
                    return await UpdateDrugBrand(drugBrand);
                }
                else
                {
                    return await InsertDrugBrand(drugBrand);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public async Task<DO_ReturnParameter> InsertDrugBrand(DO_DrugBrand obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEpdrcd isBrandExists = db.GtEpdrcd.FirstOrDefault(c => c.DrugBrand.ToUpper().Replace(" ", "") == obj.DrugBrand.ToUpper().Replace(" ", ""));

                        if (isBrandExists == null)
                        {
                            int drugCode = db.GtEpdrcd.Select(c => c.DrugCode).DefaultIfEmpty().Max();
                            drugCode = drugCode + 1;
                            var epdrbr = new GtEpdrcd
                            {
                                DrugCode = drugCode,
                                Isdcode = obj.ISDCode,
                                GenericId = obj.GenericID,
                                DrugFormulaId = obj.DrugFormulaID,
                                ManufacturerId = obj.ManufacturerID,
                                DrugBrand = obj.DrugBrand,
                                DrugPrintDesc = obj.DrugPrintDesc,
                                PackSize = obj.PackSize,
                                Packing = obj.PackingId,
                                DrugVolume = obj.DrugVolume,
                                ReferenceMrp = 0,
                                BarcodeId = obj.BarcodeID,
                                UsageStatus = false,
                                ActiveStatus = obj.ActiveStatus,
                                CreatedBy = obj.UserID,
                                CreatedOn = DateTime.Now,
                                CreatedTerminal = obj.TerminalID
                            };
                            db.GtEpdrcd.Add(epdrbr);

                            foreach (DO_eSyaParameter ip in obj.l_FormParameter)
                            {
                                var pMaster = new GtEpdrpa
                                {
                                    DrugCode = drugCode,
                                    ParameterId = ip.ParameterID,
                                    ParamAction = ip.ParmAction,
                                    ActiveStatus = ip.ActiveStatus,
                                    CreatedBy = obj.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = obj.TerminalID,
                                };
                                db.GtEpdrpa.Add(pMaster);
                            }

                            await db.SaveChangesAsync();
                            dbContext.Commit();
                            return new DO_ReturnParameter() { Status = true, Message = "Drug Brand created Successfully." };
                        }
                        else
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Drug Brand is already in use." };
                        }
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<DO_ReturnParameter> UpdateDrugBrand(DO_DrugBrand obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        GtEpdrcd isdrcdExists = db.GtEpdrcd.FirstOrDefault(c => c.DrugCode != obj.DrugCode && c.DrugBrand.ToUpper().Replace(" ", "") == obj.DrugBrand.ToUpper().Replace(" ", ""));
                        if (isdrcdExists != null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Drug Brand is already exist." };
                        }

                        GtEpdrcd dc_Id = db.GtEpdrcd.Where(s => s.DrugCode == obj.DrugCode).FirstOrDefault();
                        if (dc_Id == null)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Drug Brand Id does not exist" };
                        }

                        dc_Id.Isdcode = obj.ISDCode;
                        dc_Id.GenericId = obj.GenericID;
                        dc_Id.DrugFormulaId = obj.DrugFormulaID;
                        dc_Id.ManufacturerId = obj.ManufacturerID;
                        dc_Id.DrugBrand = obj.DrugBrand;
                        dc_Id.DrugBrand = obj.DrugBrand;
                        dc_Id.DrugPrintDesc = obj.DrugPrintDesc;
                        dc_Id.PackSize = obj.PackSize;
                        dc_Id.Packing = obj.PackingId;
                        dc_Id.DrugVolume = obj.DrugVolume;
                        dc_Id.ReferenceMrp = 0;
                        dc_Id.BarcodeId = obj.BarcodeID;
                        dc_Id.ActiveStatus = obj.ActiveStatus;
                        dc_Id.ModifiedBy = obj.UserID;
                        dc_Id.ModifiedOn = DateTime.Now;
                        dc_Id.ModifiedTerminal = obj.TerminalID;

                        foreach (DO_eSyaParameter ip in obj.l_FormParameter)
                        {
                            GtEpdrpa sPar = db.GtEpdrpa.Where(x => x.DrugCode == obj.DrugCode && x.ParameterId == ip.ParameterID).FirstOrDefault();
                            if (sPar != null)
                            {
                                sPar.ParamAction = ip.ParmAction;
                                sPar.ActiveStatus = obj.ActiveStatus;
                                sPar.ModifiedBy = obj.UserID;
                                sPar.ModifiedOn = System.DateTime.Now;
                                sPar.ModifiedTerminal = obj.TerminalID;
                            }
                            else
                            {
                                var pMaster = new GtEpdrpa
                                {
                                    DrugCode = obj.DrugCode,
                                    ParameterId = ip.ParameterID,
                                    ParamAction = ip.ParmAction,
                                    ActiveStatus = ip.ActiveStatus,
                                    CreatedBy = obj.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = obj.TerminalID,
                                };
                                db.GtEpdrpa.Add(pMaster);
                            }
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();

                        return new DO_ReturnParameter() { Status = true, Message = "Drug Brand Updated Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        public async Task<List<DO_DrugBusinessLink>> GetGenericDrugList(int businessKey)
        {
            using (var db = new eSyaEnterprise())
            {
                try
                {
                    var result = await db.GtEpdrcd
                              .GroupJoin(db.GtEpdrgn,
                        l => new { l.GenericId },
                        c => new { c.GenericId },
                        (l, c) => new { l, c = c.FirstOrDefault() }).DefaultIfEmpty()
                        .GroupJoin(db.GtEpdrbl.Where(w => w.BusinessKey == businessKey),
                        lc => new { lc.l.DrugCode },
                        o => new { o.DrugCode },
                        (lc, o) => new { lc, o = o.FirstOrDefault() }).DefaultIfEmpty()
                        .AsNoTracking()
                        .Select(r => new DO_DrugBusinessLink
                        {
                            BusinessKey = r.o != null ? r.o.BusinessKey : 0,
                            GenericID = r.lc.l.GenericId,
                            GenericDesc = r.lc.c.GenericDesc,
                            DrugCode = r.lc.l.DrugCode,
                            DrugBrand = r.lc.l.DrugBrand,
                            ActiveStatus = r.o != null ? r.o.ActiveStatus : false
                        }).OrderBy(x => x.GenericDesc).ToListAsync();

                    return result;
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }

        public async Task<DO_ReturnParameter> InsertUpdateDrugBusinessLink(List<DO_DrugBusinessLink> obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        foreach (DO_DrugBusinessLink dbl in obj)
                        {
                            GtEpdrbl drbl = db.GtEpdrbl.Where(x => x.BusinessKey == dbl.BusinessKey && x.DrugCode == dbl.DrugCode).FirstOrDefault();
                            if (drbl != null)
                            {
                                drbl.ActiveStatus = dbl.ActiveStatus;
                                drbl.ModifiedBy = dbl.UserID;
                                drbl.ModifiedOn = System.DateTime.Now;
                                drbl.ModifiedTerminal = dbl.TerminalID;
                            }
                            else if (dbl.ActiveStatus)
                            {
                                var dr_bl = new GtEpdrbl
                                {
                                    BusinessKey = dbl.BusinessKey,
                                    DrugCode = dbl.DrugCode,
                                    ActiveStatus = dbl.ActiveStatus,
                                    FormId = dbl.FormId,
                                    CreatedBy = dbl.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = dbl.TerminalID,
                                };
                                db.GtEpdrbl.Add(dr_bl);
                            }
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Drug Linked with Business Location Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #region Drug Reorder Level

        public async Task<List<DO_DrugReorderLevel>> GetDrugReorderLevel(int BusinessKey, int StoreCode)
        {
            try
            {
                using (eSyaEnterprise db = new eSyaEnterprise())
                {
                    var query = await db.GtEpdrro.Where(x => x.BusinessKey == BusinessKey && x.StoreCode == StoreCode && x.ActiveStatus == true)
                        .Select(r => new DO_DrugReorderLevel
                        {
                            DrugCode = r.DrugCode,
                        }).ToListAsync();

                    //.Join(db.GtEpdrmf,
                    //         t => new { t.ManufacturerId },
                    //         b => new { b.ManufacturerId },
                    //         (t, b) => new { t, b })

                    var result1 = await db.GtEpdrro.Where(x => x.BusinessKey == BusinessKey && x.StoreCode == StoreCode && x.ActiveStatus == true)
                        .Join(db.GtEpdrcd,
                         x => x.DrugCode,
                         y => y.DrugCode,
                         (x, y) => new { x, y })
                        .Select(r => new DO_DrugReorderLevel
                        {
                            BusinessKey = r.x.BusinessKey,
                            DrugCode = r.x.DrugCode,
                            DrugBrand = r.y.DrugBrand,
                            StoreCode = r.x.StoreCode,
                            MaximumStockLevel = r.x.MaximumStockLevel,
                            ReorderLevel = r.x.ReorderLevel,
                            SafetyStockLevel = r.x.SafetyStockLevel,
                            MinimumStockLevel = r.x.MinimumStockLevel,
                            ActiveStatus = r.x.ActiveStatus
                        }).ToListAsync();

                    var result = await db.GtEpdrcd.Where(x => x.ActiveStatus == true)
                        .Select(r => new DO_DrugReorderLevel
                        {
                            BusinessKey = BusinessKey,
                            DrugCode = r.DrugCode,
                            DrugBrand = r.DrugBrand,
                            StoreCode = StoreCode,
                            MaximumStockLevel = 0,
                            ReorderLevel = 0,
                            SafetyStockLevel = 0,
                            MinimumStockLevel = 0,
                            ActiveStatus = r.ActiveStatus
                        }).ToListAsync();//.Except(query).ToListAsync();
                                         //.Union(result1).ToListAsync();

                    var customers = result.Where(c => !query.Select(fc => fc.DrugCode).Contains(c.DrugCode)).ToList();

                    var final = customers.Union(result1).OrderBy(x => x.DrugCode).ToList();

                    return final;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public async Task<DO_ReturnParameter> InsertOrUpdateDrugReorderLevel(List<DO_DrugReorderLevel> obj)
        {
            using (var db = new eSyaEnterprise())
            {
                using (var dbContext = db.Database.BeginTransaction())
                {
                    try
                    {
                        var is_DrugReorderLevel = obj.Where(w => !String.IsNullOrEmpty(w.DrugBrand)).Count();
                        if (is_DrugReorderLevel <= 0)
                        {
                            return new DO_ReturnParameter() { Status = false, Message = "Please Enter Drug Reorder Level Details." };
                        }

                        foreach (var sd in obj.Where(w => !String.IsNullOrEmpty(w.DrugBrand)))
                        {
                            GtEpdrro cs_sd = db.GtEpdrro.Where(x => x.BusinessKey == sd.BusinessKey
                                            && x.StoreCode == sd.StoreCode && x.DrugCode == sd.DrugCode).FirstOrDefault();
                            if (cs_sd == null)
                            {
                                var o_cssd = new GtEpdrro
                                {
                                    BusinessKey = sd.BusinessKey,
                                    StoreCode = sd.StoreCode,
                                    DrugCode = sd.DrugCode,
                                    MaximumStockLevel = sd.MaximumStockLevel,
                                    ReorderLevel = sd.ReorderLevel,
                                    SafetyStockLevel = sd.SafetyStockLevel,
                                    MinimumStockLevel = sd.MinimumStockLevel,
                                    ActiveStatus = sd.ActiveStatus,
                                    FormId = sd.FormID,
                                    CreatedBy = sd.UserID,
                                    CreatedOn = System.DateTime.Now,
                                    CreatedTerminal = sd.TerminalID
                                };
                                db.GtEpdrro.Add(o_cssd);
                            }
                            else
                            {
                                cs_sd.MaximumStockLevel = sd.MaximumStockLevel;
                                cs_sd.ReorderLevel = sd.ReorderLevel;
                                cs_sd.SafetyStockLevel = sd.SafetyStockLevel;
                                cs_sd.MinimumStockLevel = sd.MinimumStockLevel;
                                cs_sd.ActiveStatus = sd.ActiveStatus;
                                cs_sd.ModifiedBy = sd.UserID;
                                cs_sd.ModifiedOn = System.DateTime.Now;
                                cs_sd.ModifiedTerminal = sd.TerminalID;
                            } 
                        }

                        await db.SaveChangesAsync();
                        dbContext.Commit();
                        return new DO_ReturnParameter() { Status = true, Message = "Drug Reorder Level Created Successfully." };
                    }
                    catch (DbUpdateException ex)
                    {
                        dbContext.Rollback();
                        throw new Exception(CommonMethod.GetValidationMessageFromException(ex));
                    }
                    catch (Exception ex)
                    {
                        dbContext.Rollback();
                        throw ex;
                    }
                }
            }
        }

        #endregion Item Reorder Level
    }
}
